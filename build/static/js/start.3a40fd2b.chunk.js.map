{"version":3,"sources":["containers/navs/Breadcrumb.js","views/app/gogo/start.js","views/app/cobranza/BotonVerQR.js","views/app/cobranza/DatatablePagination.js","views/app/cobranza/cobranzaPage.js"],"names":["getMenuTitle","sub","adminRoot","id","getUrl","path","split","BreadcrumbItems","match","substr","paths","length","indexOf","filter","x","className","map","index","active","to","BreadcrumbContainer","heading","Start","xxs","BotonVerQR","currentTupla","isOpen","closeModal","console","log","Card","CardBody","Modal","toggle","ModalHeader","idQR","gloss","ModalBody","ImageB64","base64String","codigoQR","ModalFooter","Button","color","onClick","DataTablePagination","productsPerPage","curentPage","setCurrentPage","totolProduct","useState","canPrevious","setCanPrevious","canNext","setCanNext","useEffect","pageNumbers","Math","ceil","push","Pagination","size","listClassName","aria-label","PaginationItem","PaginationLink","disabled","noPage","indice","CobranzaPage","allQRByUser","setAllQRByUser","isModalOpen","setIsModalOpen","setCurrentTupla","lastIndex","firstIndex","a","getCurrentUser","userName","title","data","fkCustomer","typeRequest","getAllQRByUser","resultado","Row","Breadcrumb","IntlMessages","CardTitle","Table","style","width","colSpan","align","undefined","tupla","scope","amount","currency","parseInt","status","background","textAlign","fontWeight","Date","expirationdate","toLocaleDateString","handleVerModal","slice"],"mappings":"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","file":"static/js/start.3a40fd2b.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from 'helpers/IntlMessages';\r\nimport { adminRoot } from 'constants/defaultValues';\r\n\r\nconst getMenuTitle = (sub) => {\r\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub) => {\r\n  return path.split(sub)[0] + sub;\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <>\r\n      {heading && (\r\n        <h1>\r\n          <IntlMessages id={heading} />\r\n        </h1>\r\n      )}\r\n      <BreadcrumbItems match={match} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split('/');\r\n  if (paths[paths.length - 1].indexOf(':') > -1) {\r\n    paths = paths.filter((x) => x.indexOf(':') === -1);\r\n  }\r\n  return ( // retorna la ruta en donde nos encontramos\r\n    <>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n","import React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport IntlMessages from 'helpers/IntlMessages';\r\nimport { Colxx, Separator } from 'components/common/CustomBootstrap';\r\nimport Breadcrumb from 'containers/navs/Breadcrumb';\r\n\r\nconst Start = ({ match }) => (\r\n  <>\r\n    <Row>\r\n      <Colxx xxs=\"12\">\r\n        <Breadcrumb heading=\"menu.start\" match={match} />\r\n        <Separator className=\"mb-5\" />\r\n      </Colxx>\r\n    </Row>\r\n    <Row>\r\n      <Colxx xxs=\"12\" className=\"mb-4\">\r\n        <p>\r\n          <IntlMessages id=\"menu.start\" />\r\n        </p>\r\n        <p>\r\n          dashboard\r\n        </p>\r\n      </Colxx>\r\n    </Row>\r\n  </>\r\n);\r\nexport default Start;\r\n","import React from 'react';\r\n// import React, { useState } from 'react';\r\nimport { \r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n  } from 'reactstrap';\r\n  \r\n// import IntlMessages from 'helpers/IntlMessages';\r\nimport ImageB64 from 'components/base64toimg/ImageB64';\r\n\r\nfunction BotonVerQR({ currentTupla, isOpen, closeModal }) {\r\n    console.log(\"LLAMAMOS AL MODAL\")\r\n    // const [modalBasic, setModalBasic] = useState(isOpen);\r\n\r\n  return (\r\n    <Card className=\"mb-4\">\r\n        <CardBody>              \r\n            <div>\r\n            <Modal\r\n                isOpen={isOpen}\r\n                toggle={() => closeModal(!isOpen)}\r\n            >\r\n                <ModalHeader>\r\n                    {/* <IntlMessages id=\"Verificado\" /> */}\r\n                    Cod: { currentTupla.idQR } <br/>\r\n                    { currentTupla.gloss } <br/>\r\n                                  \r\n                </ModalHeader>\r\n                <ModalBody>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    {/* <img src={ verificadoImg } alt=\"verify\" style={{ height: '14rem', width: \"15rem\" }} /> */}\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        { currentTupla ? (<ImageB64 base64String = { currentTupla.codigoQR }/>) : <h3>No disponible ...</h3>}\r\n                    </div>\r\n                </div>                 \r\n                </ModalBody>\r\n                <ModalFooter>\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={() => closeModal(false)}\r\n                >\r\n                    Aceptar\r\n                </Button>{' '}                    \r\n                </ModalFooter>\r\n            </Modal>\r\n            </div>\r\n        </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BotonVerQR","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Pagination,\r\n    PaginationItem,\r\n    PaginationLink    \r\n  } from 'reactstrap';\r\n\r\nfunction DataTablePagination({productsPerPage, curentPage, setCurrentPage, totolProduct}) {\r\n    const [canPrevious, setCanPrevious] = useState(false);\r\n    const [canNext, setCanNext] = useState(false);\r\n\r\n    useEffect( () => {\r\n      if( totolProduct > 0){\r\n        setCanNext(true)\r\n      }\r\n      \r\n    },[totolProduct])\r\n\r\n    const pageNumbers = []     \r\n\r\n    for (let index = 1; index <= Math.ceil(totolProduct / productsPerPage); index++){\r\n        pageNumbers.push(index)       \r\n    }\r\n\r\n    const onPreviusPage = () => {\r\n        // console.log(\"currenPage antes\", curentPage)\r\n        setCurrentPage(curentPage - 1)\r\n        // console.log(\"currenPage despues\", curentPage)\r\n        setCanPrevious(curentPage - 1 !== 1)\r\n        setCanNext(curentPage - 1)\r\n    }\r\n\r\n    const onNextPage = () => {\r\n        setCurrentPage(curentPage + 1)        \r\n        setCanNext(curentPage + 1  < pageNumbers.length)\r\n        setCanPrevious(curentPage + 1)\r\n    }\r\n\r\n    const onSpecificPage = (indice) => {\r\n        setCurrentPage(indice)        \r\n        setCanPrevious(indice !== 1) // !canPrevious && 'disabled'\r\n        setCanNext(indice !== pageNumbers.length)\r\n    }\r\n        \r\n    // const canPrevious = false\r\n    // const canNext = true\r\n    const pages = totolProduct\r\n    const pageState = curentPage -1\r\n    const paginationMaxSize = productsPerPage\r\n\r\n    /* eslint-disable */\r\n    const changePage = (_page) => {\r\n        const p = getSafePage(_page);\r\n    \r\n        if (p !== pageState) {\r\n          setPageState(p);\r\n          onPageChange(p);\r\n        }\r\n    };\r\n\r\n    const pageClick = (pageIndex) => {\r\n        // changePage(pageIndex);\r\n    };\r\n    /* eslint-enable */\r\n\r\n    /* eslint-disable */\r\n    const renderPages = () => {\r\n        const totalPages = pages;\r\n        let endPage = pages;\r\n        const currentPage = pageState;\r\n        let startPage = 0;\r\n        const maxSize = paginationMaxSize;\r\n    \r\n        if (maxSize) {\r\n          if (endPage > maxSize) {\r\n            startPage = Math.max(currentPage + 1 - Math.floor(maxSize / 2), 1);\r\n            endPage = startPage + maxSize - 1;\r\n            if (endPage > totalPages) {\r\n              endPage = totalPages;\r\n              startPage = endPage - maxSize + 1;\r\n            }\r\n            startPage -= 1;\r\n          }\r\n        }\r\n    \r\n        const pageButtons = [];\r\n        for (let i = startPage; i < endPage; i += 1) {\r\n          const active = currentPage === i;\r\n          pageButtons.push(\r\n            <PaginationItem key={i} active={active}>\r\n              <PaginationLink onClick={() => pageClick(i)}>{i + 1}</PaginationLink>\r\n            </PaginationItem>\r\n          );\r\n        }\r\n        // console.log(pageButtons)\r\n        return pageButtons;\r\n      };\r\n      /* eslint-enable */\r\n    \r\n  return (\r\n    /* eslint-disable */\r\n    <>\r\n        <div className=\"text-center\">\r\n            <Pagination\r\n            className=\"d-inline-block\"\r\n            size=\"sm\"\r\n            listClassName=\"justify-content-center\"\r\n            aria-label=\"Page navigation example\"\r\n            >\r\n            <PaginationItem className={`${!canPrevious && 'disabled'}`}>\r\n                <PaginationLink\r\n                  className=\"prev\"\r\n                  onClick={() => {\r\n                      if (!canPrevious) return;\r\n                      // changePage(page - 1);\r\n                      onPreviusPage()\r\n                  }}\r\n                  disabled={!canPrevious}\r\n                  >\r\n                  <i className=\"simple-icon-arrow-left\" />\r\n                </PaginationLink>\r\n            </PaginationItem>\r\n\r\n            {/* {renderPages()}  */}\r\n\r\n            {\r\n                    pageNumbers.map( noPage => (\r\n                        <PaginationItem key={noPage} active={noPage === curentPage}>\r\n                            <PaginationLink onClick={() => onSpecificPage(noPage)}>{noPage}</PaginationLink>\r\n                        </PaginationItem>                   \r\n                    ))\r\n                }\r\n\r\n            <PaginationItem className={`${!canNext && 'disabled'}`}>\r\n                <PaginationLink\r\n                className=\"next\"\r\n                onClick={() => {\r\n                    if (!canNext) return;\r\n                    // changePage(page + 1);\r\n                    onNextPage()\r\n                }}\r\n                disabled={!canNext}\r\n                >\r\n                <i className=\"simple-icon-arrow-right\" />\r\n                </PaginationLink>\r\n            </PaginationItem>\r\n            </Pagination>\r\n        </div>\r\n    </>\r\n    /* eslint-enable */\r\n  )\r\n}\r\n\r\nexport default DataTablePagination","import React, { useEffect, useState } from 'react';\r\nimport { Row, Button, Card, CardBody, Table, CardTitle } from 'reactstrap';\r\nimport IntlMessages from 'helpers/IntlMessages';\r\nimport { Colxx, Separator } from 'components/common/CustomBootstrap';\r\nimport Breadcrumb from 'containers/navs/Breadcrumb';\r\nimport { getCurrentUser } from 'helpers/Utils';\r\nimport { getAllQRByUser } from 'api/auth';\r\nimport BotonVerQR from './BotonVerQR'\r\nimport DataTablePagination from './DatatablePagination'\r\n\r\nconst CobranzaPage = ({ match }) => {\r\n    const [allQRByUser, setAllQRByUser] = useState([]);\r\n\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [currentTupla, setCurrentTupla] = useState(null);\r\n\r\n    /* eslint-disable */\r\n    const [productsPerPage, setProductsPerPage] = useState(10);\r\n    /* eslint-enable */\r\n    const [curentPage, setCurrentPage] = useState(1);\r\n    \r\n    const totolProduct = allQRByUser.length\r\n\r\n    const lastIndex = curentPage * productsPerPage // 1 * 6 = 6  |  2 * 6 = 12  |  3 * 6 = 18\r\n    const firstIndex = lastIndex - productsPerPage // 6 - 6 = 0  |  12 - 6 = 6  |  18 - 6 = 12\r\n\r\n    useEffect( async () => {\r\n      try {\r\n        const { title: userName} = getCurrentUser();\r\n        const data = {\r\n          userName, \r\n          fkCustomer: \"1\", \r\n          typeRequest: \"DATAQR\"\r\n        }\r\n        console.log(\"SE ESTA EJECUTANDO EL USEEFECT ....\")\r\n        const resultado = await getAllQRByUser(data);\r\n        console.log(resultado.data.data)\r\n        setAllQRByUser(resultado.data.data)\r\n      } catch (error) {\r\n        console.log(\"error al obtener los datos de Cobranza\")\r\n      }\r\n      \r\n    }, [])\r\n\r\n    const handleVerModal = (tupla) => {\r\n      setCurrentTupla(tupla);\r\n      setIsModalOpen(true);\r\n      // setTuplaQR(tuplaQR)\r\n      console.log(\"la tupla es: \")\r\n      console.log(tupla)\r\n      // setModalBasicP(!modalBasicP);     \r\n    }\r\n\r\n    return (\r\n    <>\r\n        <Row>\r\n            <Colxx xxs=\"12\">\r\n                <Breadcrumb heading=\"menu.cobranza\" match={match} />\r\n                <Separator className=\"mb-5\" />\r\n            </Colxx>\r\n        </Row>\r\n        <Row>\r\n            <Colxx xxs=\"12\" className=\"mb-4\">\r\n                <p>\r\n                    <IntlMessages id=\"menu.cobranza\" />\r\n                </p>\r\n                                \r\n            </Colxx>\r\n        </Row>\r\n\r\n\r\n        <Colxx xxs=\"12\">\r\n          <Card className=\"mb-4\">\r\n            <CardBody>\r\n              <CardTitle>\r\n                <IntlMessages id=\"table.bootstrap-basic\" />\r\n              </CardTitle>\r\n              <Table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Cliente</th>\r\n                    <th>Monto</th>\r\n                    <th>Moneda</th>\r\n                    <th style={{width: '7%'}}>Estado</th>\r\n                    <th>Fecha de Expiracion</th>\r\n                    <th>Fecha de Pago</th>\r\n                    <th>Ver QR</th>                    \r\n                    <th>Verificar</th>\r\n                    <th>Cancelar</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                {\r\n                  allQRByUser.length === 0 ? <tr><td colSpan=\"10\" align='center'>Cargando ...</td></tr> : undefined\r\n                }            \r\n                { \r\n                  allQRByUser.map((tupla) => (\r\n                                 \r\n                      <tr key={tupla.id}>\r\n                          <th scope=\"row\"> {tupla.id} </th>\r\n                          <td> {tupla.userName} </td>\r\n                          <td> {tupla.amount} </td>\r\n                          <td> {tupla.currency} </td>\r\n                          {/* <td> {tupla.status} </td>  */}                         \r\n                          { \r\n                            // eslint-disable-next-line\r\n                            parseInt(tupla.status, 10) === 0 ? <td> sin pagar </td> : <td style={{background: '#5abd71', color: 'white', textAlign: 'center', fontWeight:'bold'}}> <span style={{background: '#5abd71', color: 'white'}}>pagado</span> </td>\r\n                          }\r\n                          \r\n                          <td style={{textAlign:'center'}}> {new Date(tupla.expirationdate).toLocaleDateString()} </td>\r\n\r\n                          { \r\n                            // eslint-disable-next-line\r\n                            parseInt(tupla.status, 10) === 0 ? <td style={{textAlign:'center'}}> - </td> : <td style={{fontWeight:'', textAlign: 'center'}}> <span>25/10/2023 15:30</span> </td>\r\n                          }\r\n                          {\r\n                            parseInt(tupla.status, 10) === 0 ?\r\n                            \r\n                              <>\r\n                              <td><Button className='px-3 py-1' onClick={ () => handleVerModal(tupla) }>Ver QR</Button></td>\r\n                              <td><Button className='px-3 py-1'>Verificar</Button></td> \r\n                              <td><Button className='px-3 py-1'>Cancelar</Button></td>\r\n                              </>\r\n                            \r\n                            :\r\n                            (\r\n                              /* eslint-disable */\r\n                              <>                              \r\n                                <td></td>\r\n                                <td></td>\r\n                                <td></td>\r\n                              </>\r\n                              /* eslint-enable */\r\n                            )\r\n                          }                     \r\n                          \r\n                     </tr> \r\n                  \r\n                  )).slice(firstIndex, lastIndex)\r\n                } \r\n                </tbody>                \r\n              </Table>\r\n\r\n              <DataTablePagination\r\n                productsPerPage={productsPerPage} \r\n                curentPage={curentPage} \r\n                setCurrentPage={setCurrentPage}\r\n                totolProduct={totolProduct}\r\n              />\r\n\r\n              {isModalOpen && (\r\n                  <BotonVerQR\r\n                    currentTupla={currentTupla}\r\n                    /* key={currentTupla.id} */\r\n                    isOpen={isModalOpen}\r\n                    closeModal={() => setIsModalOpen(false)}\r\n                  />\r\n                )}\r\n                \r\n            </CardBody>\r\n          </Card>\r\n        </Colxx>\r\n    </>\r\n    );\r\n};\r\nexport default CobranzaPage;\r\n"],"sourceRoot":""}